openapi: 3.0.0
info:
  title: Cybersafe API
  description: >
    API for a web application used to help children learn to stay safe on the internet.

    Here is the list of user stories and the APIs meant to fulfill them.


    The **Modules** set of APIs help the student/child learn about cybersecurity through videos and engaging content instead of reading a book or an article, so that they can learn to be vigilant and cautious while interacting on social media and other online platforms. They also help the cybersecurity mentors upload appropriate content to the platform.


    The **Quiz and Doubts** APIs help and feature as additional content in addition to the modules of videos to help the child get a better understanding of each topic in the modules.


    The **Reports** set of APIs helps the student understand their progress and performance and identify areas of improvement. It also helps the cybersecurity mentor identify scope for improvement.


    The **Tips** set of APIs helps parents which can enable them encourage safe online practices at home.


    The **Admin** set of APIs help the user verify the content made by the mentors and provide appropriate user roles and access permissions.


    Beyond these, there are other APIs which provide added functionality to the application whose use is mentioned alongside their description.

  version: 1.0.0
servers:
- url: http://localhost:5000
  description: Local development server
tags:
- name: Authentication
  description: Registration and login
- name: Modules
  description: Module listing and deletion
- name: Quiz
  description: "Quiz retrieval, submission, creation, deletion"
- name: Doubts
  description: Post/view/reply/delete doubts
- name: Tips
  description: Safety tips and viewed status
- name: Complaints
  description: "File, view, resolve, delete complaints"
- name: Reports
  description: Student and admin reports
- name: Alerts
  description: Post/delete alerts
- name: Admin
  description: Administrative actions
- name: Profile
  description: User profile view/edit
- name: Notifications
  description: User notifications
- name: Attempts
  description: Student Quiz Attempts
- name: Activity
  description: Student Activity
paths:
  /api/register:
    post:
      tags:
      - Authentication
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api_register_body"
        required: true
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: User registered successfully
          
        "400":
          description: Username/email already exists
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Username/email already exists
  /api/login:
    post:
      tags:
      - Authentication
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api_login_body"
        required: true
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Login successful
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Invalid credentials
  /api/modules:
    get:
      tags:
      - Modules
      summary: Get all modules
      responses:
        "200":
          description: List of modules
          content:
            application/json:
              schema:
                type: object
                properties:
                  module_id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: Cyber Hygiene
                  description:
                    type: string
                    example: Learn basic cyber safety habits.

  /api/modules/upload:
    post:
      tags:
      - Modules
      summary: Upload a new module
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/modules_upload_body"
        required: true
      responses:
        "201":
          description: Module uploaded successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Module upload successfully
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Invalid request payload
  /api/modules/delete/{module_id}:
    delete:
      tags:
      - Modules
      summary: Soft delete a module
      parameters:
      - name: module_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Module deleted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Module deleted successfully
        "404":
          description: Module not found or already deleted
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Module not found or already deleted
  /api/quiz/{quiz_id}:
    get:
      tags:
      - Quiz
      summary: Get quiz with questions
      parameters:
      - name: quiz_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Quiz data
          content:
            application/json:
              schema:
                type: object
        "404":
          description: Quiz not found
  /api/quiz/delete/{quiz_id}:
    delete:
      tags:
      - Quiz
      summary: Soft delete a quiz
      parameters:
      - name: quiz_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Quiz deleted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Quiz deleted successfully
        "404":
          description: Quiz not found or already deleted
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Quiz not found or already deleted
  /api/quiz/submit:
    post:
      tags:
      - Quiz
      summary: Submit quiz answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quiz_submit_body"
        required: true
      responses:
        "200":
          description: Quiz submitted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Quiz submitted successfully
        "400":
          description: Missing quiz_id, student_id, or answers
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Missing quiz_id, student_id or answers
  /api/quiz/create:
    post:
      tags:
      - Quiz
      summary: Create a new quiz
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Quiz object with questions and options
        required: true
      responses:
        "200":
          description: Quiz created and uploaded successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Quiz created and uploaded successfully
  /api/doubt:
    post:
      tags:
      - Doubts
      summary: Ask a doubt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api_doubt_body"
        required: true
      responses:
        "201":
          description: Doubt submitted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Doubt submitted successfully
        "400":
          description: Invalid request
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Invalid request
  /api/doubts/{mentor_id}:
    get:
      tags:
      - Doubts
      summary: Get doubts for a mentor
      parameters:
      - name: mentor_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: List of doubts
          content:
            application/json:
              schema:
                type: object
                properties:
                  doubt_id:
                    type: integer
                    example: 1
                  student_id:
                    type: integer
                    example: 5
                  module_id:
                    type: integer
                    example: 2
                  question:
                    type: string
                    example: How can to make a strong password?

  /api/doubt/reply:
    post:
      tags:
      - Doubts
      summary: Reply to a doubt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/doubt_reply_body"
        required: true
      responses:
        "200":
          description: Reply submitted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Reply submitted successfully
  /api/doubts/delete/{doubt_id}:
    delete:
      tags:
      - Doubts
      summary: Soft delete a doubt
      parameters:
      - name: doubt_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Doubt deleted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Doubt deleted successfully
        "404":
          description: Doubt not found or already deleted
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Doubt not found or already deleted
  /api/tips:
    get:
      tags:
      - Tips
      summary: List all safety tips
      responses:
        "200":
          description: Array of tips
          content:
            application/json:
              schema:
                type: object
                properties:
                  tip_id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: Phishing alert
                  content:
                    type: string
                    example: Dont' click unknown links
                  category:
                    type: string
                    example: email
                  source_url:
                    type: string
                    example: https://example.com/phishing

  /api/tips/viewed/{parent_id}:
    get:
      tags:
      - Tips
      summary: Tips viewed by a parent
      parameters:
      - name: parent_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Viewed tips
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        "404":
          description: Parent not found
  /api/tips/view:
    post:
      tags:
      - Tips
      summary: Mark a tip as viewed
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tips_view_body"
        required: true
      responses:
        "201":
          description: Tip marked as viewed
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Tip marked as viewed
        "400":
          description: Invalid request
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Invalid request
  /api/tips/delete/{tip_id}:
    delete:
      tags:
      - Tips
      summary: Soft delete a tip
      parameters:
      - name: tip_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Tip deleted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Tip deleted successfully
        "404":
          description: Tip not found or already deleted
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Tip not found or already deleted

  /api/student/{student_id}/attempts:
    get:
      tags:
      - Attempts
      summary: Gets the list of all attempts for a quiz given by student
      parameters:
      - name: student_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Dictionary of Attempts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /api/activity/{student_id}:
    get:
      tags:
      - Activity
      summary: Gets the activity of the student
      parameters:
      - name: student_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Gets the Activity
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /api/complaints:
    get:
      tags:
      - Complaints
      summary: List of complaints for support team
      responses:
        "200":
          description: Complaints
          content:
            application/json:
              schema:
                type: object
                properties:
                  complaint_id:
                    type: integer
                    example: 1
                  filed_by:
                    type: string
                    example: student1
                  against:
                    type: string
                    example: mentor1
                  description:
                    type: string
                    example: Issue with doubt reply

  /api/complaints/file:
    post:
      tags:
      - Complaints
      summary: File a new complaint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api_complaints_body"
        required: true
      responses:
        "201":
          description: Complaint filed
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Complaint filed
  /api/complaints/resolve:
    post:
      tags:
      - Complaints
      summary: Resolve a complaint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/complaints_resolve_body"
        required: true
      responses:
        "200":
          description: Complaint resolved
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Complaint resolved
  /api/complaints/delete/{complaint_id}:
    delete:
      tags:
      - Complaints
      summary: Soft delete a complaint
      parameters:
      - name: complaint_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Complaint deleted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Complaint deleted successfully
        "404":
          description: Complaint not found or already deleted
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Complaint not found or already deleted

  /api/reports/{student_id}:
    get:
      tags:
      - Reports
      summary: Student reports
      parameters:
      - name: student_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Array of reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_id:
                    type: integer
                    example: 1
                  quiz_id:
                    type: integer
                    example: 1
                  score:
                    type: integer
                    example: 80
                  duration:
                    type: string
                    example: 5 min
        "404":
          description: Not found or none available
  /api/reports/delete/{report_id}:
    delete:
      tags:
      - Reports
      summary: Soft delete a report
      parameters:
      - name: report_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Report deleted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Report deleted successfully
        "404":
          description: Report not found or already deleted
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Report not found or already deleted
  /api/alerts:
    post:
      tags:
      - Alerts
      summary: Post an alert
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/api_alerts_body"
        required: true
      responses:
        "200":
          description: Alert posted
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Alert posted
  /api/alerts/delete/{alert_id}:
    delete:
      tags:
      - Alerts
      summary: Soft delete an alert
      parameters:
      - name: alert_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Alert deleted successfully
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Alert deleted successfully
        "404":
          description: Alert not found or already deleted
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error: 
                    type: string
                    example: Alert not found or already deleted
  /api/admin/users:
    get:
      tags:
      - Admin
      summary: List all users
      responses:
        "200":
          description: Array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  module_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: user_1
                  email:
                    type: string
                    example: user_1@gmail.com
                  role:
                    type: string
                    example: student
                  isActive:
                    type: boolean
                    example: true

  /api/admin/trainers/pending:
    get:
      tags:
      - Admin
      summary: Pending trainers
      responses:
        "200":
          description: Array of mentors
          content:
           application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 3
                  expertise:
                    type: string
                    example: Cybersecurity
                  experience_years:
                    type: integer
                    example: 5
         
  /api/admin/contents/pending:
    get:
      tags:
      - Admin
      summary: Pending content approvals
      responses:
        "200":
          description: Array of modules
          content:
            application/json:
              schema:
                type: object
                properties:
                  module_id:
                    type: integer
                    example: 3
                  title:
                    type: string
                    example: Cyber Hygiene
                  description:
                    type: string
                    example: Learn basic cyber safety habits.

  /api/admin/reports/download/users:
    get:
      tags:
      - Admin
      summary: Download user report
      responses:
        "200":
          description: File download
          content:
            application/octet-stream: {}
  /api/admin/reports/download/summary:
    get:
      tags:
      - Admin
      summary: Download summary report
      responses:
        "200":
          description: File download
          content:
            application/octet-stream: {}
  /api/admin/block:
    post:
      tags:
      - Admin
      summary: Block a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/admin_block_body"
        required: true
      responses:
        "200":
          description: User blocked
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: User blocked
  /api/admin/unblock:
    post:
      tags:
      - Admin
      summary: Unblock a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/admin_unblock_body"
        required: true
      responses:
        "200":
          description: User unblocked
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: User unblocked
  /api/profile/{user_id}:
    get:
      tags:
      - Profile
      summary: Get user profile
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: User profile details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 3
                  username:
                    type: string
                    example: user_3
                  email:
                    type: string
                    example: user_3@gmail.com
                  role:
                    type: string
                    example: mentor
        "404":
          description: User not found
  /api/profile/edit:
    post:
      tags:
      - Profile
      summary: Edit user profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/profile_edit_body"
        required: true
      responses:
        "200":
          description: Profile updated
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                    example: Profile updated
  /api/notifications/{user_id}:
    get:
      tags:
      - Notifications
      summary: Get notifications for a user
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Notifications list
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  message: 
                    type: string
                    example: New quiz available in Cyber Hygiene module
        "404":
          description: Not found or no notifications
components:
  schemas:
    api_register_body:
      required:
      - email
      - password
      - role
      - username
      type: object
      properties:
        username:
          type: string
          example: user_1
        email:
          type: string
          format: email
          example: user_1@gmail.com
        password:
          type: string
          example: Feb@#412748
        role:
          type: string
          enum:
          - student
          - parent
          - mentor
          - admin
          - support
    api_login_body:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          example: user_1
        password:
          type: string
          example: Feb@#412748

    modules_upload_body:
      required:
      - content
      - title
      - uploaded_by
      type: object
      properties:
        title:
          type: string
          example: Introduction to cybersecurity
        content:
          type: string
          example: video
        uploaded_by:
          type: integer
          example: 2
    quiz_submit_body:
      required:
      - answers
      - quiz_id
      - student_id
      type: object
      properties:
        quiz_id:
          type: integer
          example: 1
        student_id:
          type: integer
          example: 2
        answers:
          type: object
          example: 
           '1': 'a'
           '2': 'b'
           '3': 'c'
    api_doubt_body:
      required:
      - mentor_id
      - module_id
      - question
      - student_id
      type: object
      properties:
        student_id:
          type: integer
          example: 1
        mentor_id:
          type: integer
          example: 2
        module_id:
          type: integer
          example: 2
        question:
          type: string
          example: What kind of phishing methods are used by scammers?
    doubt_reply_body:
      required:
      - answer
      - doubt_id
      type: object
      properties:
        doubt_id:
          type: integer
          example: 1
        answer:
          type: string
          example: Some of phishing methods used by scammers are 1) Email Phishing 2) Spear Phishing 3) Website based phishing 4) Voice Phishing 5) SMS Phishing
    tips_view_body:
      required:
      - parent_id
      - tip_id
      type: object
      properties:
        parent_id:
          type: integer
          example: 2
        tip_id:
          type: integer
          example: 3
    api_complaints_body:
      required:
      - against
      - description
      - filed_by
      type: object
      properties:
        filed_by:
          type: string
          example: Student_1
        against:
          type: string
          example: Mentor_1
        description:
          type: string
          example: Giving incorrect responses and incorrect suggestions
    complaints_resolve_body:
      required:
      - complaint_id
      type: object
      properties:
        complaint_id:
          type: integer
          example: 7
    api_alerts_body:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          example: You may experience a slow down in application tommorow (8:00 am to 10:00 pm) due to server maintainence.
    admin_block_body:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          example: 3
    admin_unblock_body:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          example: 4
    profile_edit_body:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          example: 2
        username:
          type: string
          example: user_2
        email:
          type: string
          example: user_2@gmail.com
        password:
          type: string
          example: Fejdl@649#1
